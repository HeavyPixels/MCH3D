from enum import IntEnum

class C(IntEnum):
    """Commands for the LCD Controller."""
    NOP = 0x100
    LCD_RESET = 0x101
    #READ_DISPLAY_IDENTIFICATION_INFORMATION = 0x104
    #READ_DISPLAY_STATUS = 0x109
    #READ_DISPLAY_POWER_MODE = 0x10A
    #READ_DISPLAY_MADCTL = 0x10B
    #READ_DISPLAY_PIXEL_FORMAT = 0x10C
    #READ_DISPLAY_IMAGE_FORMAT = 0x10D
    #READ_DISPLAY_SIGNAL_MODE = 0x10E
    #READ_DISPLAY_SELF_DIAGNOSTIC_RESULT = 0x10F
    ENTER_SLEEP_MODE = 0x110
    SLEEP_OUT = 0x111
    PARTIAL_MODE_ON = 0x112
    NORMAL_DISPLAY_MODE_ON = 0x113
    DISPLAY_INVERSION_OFF = 0x120
    DISPLAY_INVERSION_ON = 0x121
    GAMMA_SET = 0x126
    DISPLAY_OFF = 0x128
    DISPLAY_ON = 0x129
    COLUMN_ADDRESS_SET = 0x12A
    PAGE_ADDRESS_SET = 0x12B
    MEMORY_WRITE = 0x12C
    #COLOR_SET = 0x12D
    #MEMORY_READ = 0x12E
    PARTIAL_AREA = 0x130
    VERTICAL_SCROLLING_DEFINITION = 0x133
    TEARING_EFFECT_LINE_OFF = 0x134
    TEARING_EFFECT_LINE_ON = 0x135
    MEMORY_ACCESS_CONTROL = 0x136
    VERTICAL_SCROLLING_START_ADDRESS = 0x137
    IDLE_MODE_OFF = 0x138
    IDLE_MODE_ON = 0x139
    PIXEL_FORMAT_SET = 0x13A
    WRITE_MEMORY_CONTINUE = 0x13C
    #READ_MEMORY_CONTINUE = 0x13E
    SET_TEAR_SCANLINE = 0x144
    #GET_SCANLINE = 0x145
    WRITE_DISPLAY_BRIGHTNESS = 0x151
    #READ_DISPLAY_BRIGHTNESS = 0x152
    WRITE_CTRL_DISPLAY = 0x153
    #READ_CTRL_DISPLAY = 0x154
    WRITE_CONTENT_ADAPTIVE_BRIGHTNESS_CONTROL = 0x155
    #READ_CONTENT_ADAPTIVE_BRIGHTNESS_CONTROL = 0x156
    WRITE_CABC_MINIMUM_BRIGHTNESS = 0x15E
    #READ_CABC_MINIMUM_BRIGHTNESS = 0x15F
    #READ_ID1 = 0x1DA
    #READ_ID2 = 0x1DB
    #READ_ID3 = 0x1DC
    RGB_INTERFACE_SIGNAL_CONTROL = 0x1B0
    FRAME_CONTROL_NORMAL_MODE = 0x1B1
    FRAME_CONTROL_IDLE_MODE = 0x1B2
    FRAME_CONTROL_PARTIAL_MODE = 0x1B3
    DISPLAY_INVERSION_CONTROL = 0x1B4
    BLANKING_PORCH_CONTROL = 0x1B5
    DISPLAY_FUNCTION_CONTROL = 0x1B6
    ENTRY_MODE_SET = 0x1B7
    BACKLIGHT_CONTROL_1 = 0x1B8
    BACKLIGHT_CONTROL_2 = 0x1B9
    BACKLIGHT_CONTROL_3 = 0x1BA
    BACKLIGHT_CONTROL_4 = 0x1BB
    BACKLIGHT_CONTROL_5 = 0x1BC
    BACKLIGHT_CONTROL_7 = 0x1BE
    BACKLIGHT_CONTROL_8 = 0x1BF
    POWER_CONTROL_1 = 0x1C0
    POWER_CONTROL_2 = 0x1C1
    VCOM_CONTROL_1 = 0x1C5
    VCOM_CONTROL_2 = 0x1C7
    UNDOCUMENTED_CB = 0x1CB
    UNDOCUMENTED_CF = 0x1CF
    NV_MEMORY_WRITE = 0x1D0
    NV_MEMORY_PROTECTION_KEY = 0x1D1
    #NV_MEMORY_STATUS_READ = 0x1D2
    #READ_ID4 = 0x1D3
    POSITIVE_GAMMA_CORRECTION = 0x1E0
    NEGATIVE_GAMMA_CORRECTION = 0x1E1
    DIGITAL_GAMMA_CONTROL_1 = 0x1E2
    DIGITAL_GAMMA_CONTROL_2 = 0x1E3
    UNDOCUMENTED_E8 = 0x1E8
    UNDOCUMENTED_EA = 0x1EA
    UNDOCUMENTED_ED = 0x1ED
    UNDOCUMENTED_EF = 0x1EF
    UNDOCUMENTED_F2 = 0x1F2
    INTERFACE_CONTROL = 0x1F6
    UNDOCUMENTED_F7 = 0x1F7
    CMD_SET_RESET = 0x1FD
    CMD_CLEAR_RESET = 0x1FE
    CMD_DELAY = 0x1FF

class PIXSET_DPI(IntEnum):
    RGB_16BPP = 0x50
    RGB_18BPP = 0x60

class PIXSET_DBI(IntEnum):
    MCU_16BPP = 0x05
    MCU_18BPP = 0x06

class DISCTRL_PTG(IntEnum):
    NORMAL_SCAN = 0x00
    INTERVAL_SCAN = 0x08
    pass

class DISCTRL_PT(IntEnum):
    CLAMP = 0x00
    CLAMP_INV = 0x01
    AGND = 0x02
    HIZ = 0x03
    pass

class DISCTRL_REV(IntEnum):
    NORMALLY_BLACK = 0x00
    NORMALLY_WHITE = 0x80
    pass

class DISCTRL_GS(IntEnum):
    GATE_SCAN_UP = 0x00   # G1 -> G320
    GATE_SCAN_DOWN = 0x40 # G320 -> G1

class DISCTRL_SS(IntEnum):
    SOURCE_SCAN_UP = 0x00   # S1 -> S720
    SOURCE_SCAN_DOWN = 0x20 # S720 -> S1

class DISCTRL_SM(IntEnum):
    NORMAL_ORDER = 0x00
    SEGMENTED_ORDER = 0x10

class DISCTRL_ISC(IntEnum):
    INTERVAL_1 = 0x00
    INTERVAL_3 = 0x01
    INTERVAL_5 = 0x02
    INTERVAL_7 = 0x03
    INTERVAL_9 = 0x04
    INTERVAL_11 = 0x05
    INTERVAL_13 = 0x06
    INTERVAL_15 = 0x07
    INTERVAL_17 = 0x08
    INTERVAL_19 = 0x09
    INTERVAL_21 = 0x0A
    INTERVAL_23 = 0x0B
    INTERVAL_25 = 0x0C
    INTERVAL_27 = 0x0D
    INTERVAL_29 = 0x0E
    INTERVAL_31 = 0x0F

def DISCTRL_NL(lines):
    l = lines // 8 - 1
    return min(max(l, 0x01), 0x27)

class TEON_M(IntEnum):
    VBLANK_ONLY = 0x00
    VBLANK_AND_HBLANK = 0x01

class MADCTL_MY(IntEnum):
    ADDRESS_TOP_TO_BOTTOM = 0x00
    ADDRESS_BOTTOM_TO_TOP = 0x80

class MADCTL_MX(IntEnum):
    ADDRESS_LEFT_TO_RIGHT = 0x00
    ADDRESS_RIGHT_TO_LEFT = 0x40

class MADCTL_MV(IntEnum):
    VERTICAL_DISPLAY = 0x00
    HORIZONTAL_DISPLAY = 0x20

class MADCTL_ML(IntEnum):
    SCAN_TOP_TO_BOTTOM = 0x00
    SCAN_BOTTOM_TO_TOP = 0x10

class MADCTL_BGR(IntEnum):
    RGB_PANEL = 0x00
    BGR_PANEL = 0x08

class MADCTL_MH(IntEnum):
    SCAN_LEFT_TO_RIGHT = 0x00
    SCAN_RIGHT_TO_LEFT = 0x04

command_list = [
    C.NOP,
    C.CMD_SET_RESET,
    C.CMD_DELAY, 0x05,
    C.CMD_CLEAR_RESET,
    C.CMD_DELAY, 0x0F,
    C.CMD_SET_RESET,
    C.CMD_DELAY, 0x0F,
    C.UNDOCUMENTED_EF, 0x03, 0x80, 0x02,
    C.UNDOCUMENTED_CF, 0x00, 0xC1, 0x30,
    C.UNDOCUMENTED_ED, 0x64, 0x03, 0x12, 0x81,
    C.UNDOCUMENTED_E8, 0x85, 0x00, 0x78, 
    C.UNDOCUMENTED_CB, 0x39, 0x2C, 0x00, 0x34, 0x02,
    C.UNDOCUMENTED_F7, 0x20,
    C.UNDOCUMENTED_EA, 0x00, 0x00,
    C.POWER_CONTROL_1, 0x23,
    C.POWER_CONTROL_2, 0x10,
    C.VCOM_CONTROL_1, 0x3E, 0x28,
    C.VCOM_CONTROL_2, 0x86,
    C.PIXEL_FORMAT_SET, PIXSET_DPI.RGB_16BPP | PIXSET_DBI.MCU_16BPP,
    C.DISPLAY_FUNCTION_CONTROL,
    DISCTRL_PTG.INTERVAL_SCAN | DISCTRL_PT.CLAMP,
    DISCTRL_REV.NORMALLY_WHITE | DISCTRL_GS.GATE_SCAN_UP | DISCTRL_SS.SOURCE_SCAN_UP | DISCTRL_SM.NORMAL_ORDER | DISCTRL_ISC.INTERVAL_5,
    DISCTRL_NL(320),
    C.UNDOCUMENTED_F2, 0x00,
    C.GAMMA_SET, 0x01,
    C.POSITIVE_GAMMA_CORRECTION, 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1, 0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00,
    C.NEGATIVE_GAMMA_CORRECTION, 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F,
    C.SLEEP_OUT,
    C.DISPLAY_ON,
    C.TEARING_EFFECT_LINE_ON, TEON_M.VBLANK_ONLY,
    C.MEMORY_ACCESS_CONTROL,
    MADCTL_MY.ADDRESS_TOP_TO_BOTTOM | MADCTL_MX.ADDRESS_LEFT_TO_RIGHT | MADCTL_MV.VERTICAL_DISPLAY | MADCTL_ML.SCAN_TOP_TO_BOTTOM | MADCTL_BGR.BGR_PANEL | MADCTL_MH.SCAN_LEFT_TO_RIGHT,
    C.COLUMN_ADDRESS_SET, 0x00, 0x00, 0x00, 0xEF,
    C.PAGE_ADDRESS_SET, 0x00, 0x00, 0x01, 0x3F,
    C.NOP
]

if len(command_list) > 128:
    raise Exception("Too many argument in command list")
elif len(command_list) < 128:
    command_list += [C.NOP] * (128 - len(command_list))

with open("lcd_init_rom.hex", "w") as f:
    f.writelines([f"{x:03X}\n" for x in command_list])